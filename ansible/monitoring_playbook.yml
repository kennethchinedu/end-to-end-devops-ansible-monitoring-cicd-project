- name: Configure EC2 instance
  hosts: all #this playbook will run on the monitoring server
  remote_user: ubuntu
  become: true
  vars_files:
    - vars.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
    monitoring_packages:
      - prometheus
      - prometheus-node-exporter
      - prometheus-blackbox-exporter
      - prometheus-alertmanager

    


  tasks:

     
    
    - name: Ensure Nginx is installed
      ansible.builtin.apt:
        name: nginx
        state: present
        # update_cache: true
    
    - name: Ensure Nginx starts on boot
      ansible.builtin.service:
        name: nginx
        enabled: yes

    - name: Configure the Nginx server
      ansible.builtin.copy:
        src: ./templates/reverse_proxy.conf.j2
        dest: /etc/nginx/conf.d/reverse_proxy.conf

    - name: Remove default site from sites-enabled
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: test nginx configuration 
      ansible.builtin.command: nginx -t
      
    - name: restart nginx service
      ansible.builtin.service:
        name: nginx
        state: restarted

    - name: Install monitoring packages
      apt:
        name: "{{ item }}"
        state: present
      loop: "{{ monitoring_packages }}"
      become: true

    - name: Ensure Prometheus is running
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ monitoring_packages }}" 

    - name: copy prometheus.yml file
      copy:
        src: ./templates/prometheus.yml #./ansible/templates/prometheus.yml
        dest: /etc/prometheus/prometheus.yml
        mode: 0644 

    - name: copy dynamic target file
      copy:
        src: ./templates/targets.yml #./ansible/templates/prometheus.yml
        dest: /etc/prometheus/targets.yml
        mode: 0644 

    - name: copy prometheus_alert.yml file
      copy:
        src: ./templates/alert.yml
        dest: /etc/prometheus/alert.yml


    - name: restart prometheus service
      ansible.builtin.service:
        name: "{{ item }}"
        state: restarted
      loop: "{{ monitoring_packages }}"

# Setting up graphana for visualization
    - name: Download Grafana GPG key
      get_url:
        url: https://packages.grafana.com/gpg.key
        dest: /etc/apt/keyrings/grafana.gpg
        mode: '0644'

    - name: Ensure keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Grafana GPG key
      get_url:
        url: https://packages.grafana.com/gpg.key
        dest: /etc/apt/keyrings/grafana.gpg
        mode: '0644'

    - name: Add Grafana APT repository securely
      copy:
        dest: /etc/apt/sources.list.d/grafana.list
        content: |
          deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://packages.grafana.com/oss/deb stable main
        mode: '0644'


    - name: Install Grafana
      shell:
        cmd: |
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://packages.grafana.com/oss/deb stable main" | \
          sudo tee /etc/apt/sources.list.d/grafana.list > /dev/null
          sudo chmod a+r /etc/apt/keyrings/grafana.gpg
          sudo apt-get update
          sudo apt-get install grafana -y

    - name: Ensure Grafana is started
      ansible.builtin.service:
        name: grafana-server
        state: started

    - name: Ensure Grafana is enabled
      ansible.builtin.service:
        name: grafana-server
        enabled: yes

    - name: Enable and start Grafana
      systemd:
        name: grafana-server
        enabled: yes
        state: started

