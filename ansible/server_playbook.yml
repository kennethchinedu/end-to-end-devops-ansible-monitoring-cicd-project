- name: Configure EC2 instance
  hosts: all #this playbook will run on all the servers
  remote_user: ubuntu
  become: true
  vars_files:
    - vars.yml 
      
  vars:
    ansible_python_interpreter: /usr/bin/python3
    monitoring_packages:
      - prometheus-node-exporter
      - prometheus-blackbox-exporter 
    node_packages:
      - nodejs
      - npm

    # github_token: "{{ secrets.GIT_TOKEN }}"

   
    
  tasks:

    # - name: Ensure Nginx is absent
    #   ansible.builtin.apt:
    #     name: nginx
    #     state: absent
    #     update_cache: true

    - name: Ensure Nginx is installed
      ansible.builtin.apt:
        name: nginx
        state: present
        update_cache: false 

    - name: Ensure Nginx starts on boot
      ansible.builtin.service:
        name: nginx
        enabled: yes

    - name: Pull latest configuration from private Git repo
      ansible.builtin.git:
        repo: "https://github.com/kennethchinedu/end-to-end-devops-ansible-monitoring-cicd-project.git"
        dest: /app
        version: main
        update: yes


    - name: Configure the Nginx server
      ansible.builtin.copy:
        src: ./templates/reverse_proxy.conf.j2
        dest: /etc/nginx/conf.d/reverse_proxy.conf
      
    # - name: Enable new Nginx site
    #   ansible.builtin.file:
    #     src: /etc/nginx/sites-available/reverse_proxy.conf
    #     dest: /etc/nginx/sites-enabled/reverse_proxy.conf
    #     state: link
    

     
    # - name: Enable Reverse Proxy Site
    #   ansible.builtin.file:
    #     src: /etc/nginx/sites-available/reverse_proxy.conf
    #     dest: /etc/nginx/sites-enabled/reverse_proxy.conf
    #     state: link

    # - name: Remove default Nginx site
    #   ansible.builtin.file:
    #     path: /etc/nginx/sites-enabled/default
    #     state: absent

    
    - name: Test Nginx configuration
      ansible.builtin.shell:
        cmd: | 
          nginx -t 
      register: nginx_test
      ignore_errors: yes

    - name: Show Nginx test output
      ansible.builtin.debug:
        var: nginx_test.stdout_lines





    - name: reload Nginx service
      ansible.builtin.service:
        name: nginx 
        state: reloaded

    - name: Install nodejs
      ansible.builtin.apt:
        name:  "{{ item }}"
        state: present
      loop: "{{ node_packages }}"
      register: nodejs_output

    # - name: Install Node.js
    #   ansible.builtin.shell:
    #     cmd: |
    #       curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
    #       \. "$HOME/.nvm/nvm.sh" 
    #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    #       nvm install 14
    #       node -v
    #       npm -v
    #   register: nodejs_output

    - name: Show Node.js output
      ansible.builtin.debug:
        var: nodejs_output.stdout_lines

    - name: Install PM2
      ansible.builtin.shell:
        cmd: | 
          source $HOME/.nvm/nvm.sh
          npm install pm2 -g
          pwd
      register: pm2_output

    - name: Show PM2 output
      ansible.builtin.debug:
        var: pm2_output.stdout_lines 



    - name: Install app dependencies  
      ansible.builtin.shell:
        cmd: |
          sudo npm install
      args:
        chdir: /app/app
      become: true
      register: app_output

    - name: Show app output 
      ansible.builtin.debug:
        var: app_output.stdout_lines

    
    - name: Build the application
      ansible.builtin.shell: sudo npm run build
      args:
        chdir: /app/app

    - name: Start the application
      ansible.builtin.shell: sudo pm2 start npm --name onlineangel -- start
      args:
        chdir: /app/app

    - name: Save PM2 process list
      ansible.builtin.shell: |
        pm2 list 
      args:
        chdir: /app/app
    

    - name: Ensure the server is running
      ansible.builtin.shell:
        cmd: |
          curl -I http://localhost:3000
      register: server_status
      ignore_errors: yes

    - name: Show server status
      ansible.builtin.debug:
        var: server_status.stdout_lines

    - name: Install monitoring packages
      apt:
        name: "{{ item }}"
        state: present   
      loop: "{{ monitoring_packages }}"
      become: true
    
    - name: Start and enable prometheus-node-exporter
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ monitoring_packages }}"
      become: true
